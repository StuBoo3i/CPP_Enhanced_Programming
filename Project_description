C++提高编程
本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层次的应用。
1.模板
1.1概念
模板就是建立通用的模具，大大提高复用性。
1.2函数模板
    ·C++另一种编程思想称为泛型编程，主要利用的技术就是模板。
    ·C++提供两种模板机制：函数模板和类模板。
    1.2.1函数模板语法
        函数模板的作用：建立一个通用函数，其函数返回值和形参类型可以不具体指定，用一个虚拟的类型来代表。
        语法：template<typename T>    函数声明或定义
        template -- 生命模板的创建
        typename -- 临时数据类型，可用class替换
        T -- 通用的数据类型
    1.2.2注意事项
        1.自动类型推导，必须推导出一致的数据类型T才可以使用。
        1.模板必须确定T的数据类型才可以使用。
    1.2.4普通函数和函数模板的区别
        1.普通函数在调用时可以发生自动类型转换（隐式类型转换）。
        2.函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换，
        3.如果利用显式指定类型的方式，则可以发生隐式类型转换。
    1.2.5普通函数和函数模板的调用规则
        1.如果两者都可以实现，普通函数优先调用。
        2.可以通过空模板参数列表来强制调用函数模板。
        3.函数模板也可以发生重载。
        4.如果函数模板可以产生更好的匹配，优先调用函数模板。
    1.2.6模板的局限性
        例如如果传入的数据类型是数组时无法实现（赋值）、自定义数据类型的比较操作也无法实现。
        C++为了解决上述问题，提供了模板的重载，可以为这些特定的类型提供具体的模板。
1.3类模板
    1.3.1语法
        ·建立一个通用类，类中的成员数据类型可以不具体指定，用一个虚拟的类型来代表。
        template<typename T>
        类
    解释：
        template -- 声明创建模板。
        typename -- 临时数据类型，可用class替换。
        T -- 通用的数据类型
    1.3.2类模板与函数模板的区别
        1.类模板没有自动类型推导的使用方式。
        2.类模板在模板参数列表中可以有默认参数。
    1.3.3类模板中成员函数创建时机
        1.普通类中的成员函数一开始就可以创建。
        2.类模板中的成员函数在调用时才创建。
    1.3.4类模板对象做函数参数
        ·类模板实例化出的对象，像函数传参的方式。
        1.指定传入的类型 -- 直接显示对象的数据类型(第一种应用最广泛)
        2.参数模板化    -- 将对象中的参数变为模板进行传递
        3.整个类模板化   -- 将这个对象类型模板化进行传递
    1.3.5类模板与继承
        1.当子类继承的父类是一个类模板时，子类在声明时，要指定父类中T的类型。
        2.如果不指定，编译器无法给子类分配内存。
        3.如果想灵活指定父类中的T的类型，子类也需变为类模板。
    1.3.6类模板成员函数类外实现
    1.3.7类模板分文件编写
        ·类模板中的成员函数创建时机是在调用阶段，导致分文件编写时链接不到
    解决：
        1.直接包含cpp文件。
        2.将声明和实现写到同一个文件中，并更名为.hpp，hpp为约定的名称，不是强制的。
    1.3.8类模板与友元
        全局函数的类内实现 - 直接在类内声明友元即可。
        全局函数的类外实现 - 需要提前让编译器知道全局函数的存在。
2.STL初识
2.1 STL的诞生
    ·长久以来，软件界一直希望建立一种可重复利用的东西。
    ·C++的面向对象和泛型编程思想，目的就是复用性的提升。
    ·大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作。
    ·为了建立数据结构和算法的一套标准,诞生了STL。
2.2STL基本概念
    ·STL(Standard Template Library,标准模板库)。
    ·STL从广义上分为:容器(container)算法(algorithm)迭代器(iterator)。
    ·容器和算法之间通过迭代器进行无缝连接。
    ·STL几乎所有的代码都采用了模板类或者模板函数。
2.3 STL六大组件
    STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器(配接器)、空间配置器
        1.容器:各种数据结构，如vector、list, deque,set、map等,用来存放数据。
        2.算法:各种常用的算法，如sort、find、copy、for_each等
        3.迭代器:扮演了容器与算法之间的胶合剂。
        4.仿函数:行为类似函数，可作为算法的某种策略。
        5.适配器:一种用来修饰容器或者仿函数或迭代器接口的东西。
        6.空间配置器:负责空间的配置与管理。
2.4 STL中容器、算法、迭代器
    容器:置物之所也
        STL容器就是将运用最广泛的一些数据结构实现出来。
        常用的数据结构:数组,链表,树,栈,队列,集合，映射表等这些容器分为序列式容器和关联式容器两种:
            关联式容器:二叉树结构，各元素之间没有严格的物理上的顺序关系。
            序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置。
    算法:问题之解法也
        有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)
        算法分为:质变算法和非质变算法。
            质变算法:是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等。
            非质变算法:是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等。
    迭代器:容器和算法之间粘合剂
        提供一种方法，便之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。
        每个容器都有自己专属的迭代器。
        迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针。
        迭代器种类:
        种类	功能	支持运算
            输入迭代器	对数据的只读访问	                                只读，支持++、==、! =
            输出迭代器	对数据的只写访问	                                只写，支持++
            前向迭代器	读写操作，并能向前推进迭代器	                        读写，支持++、==、!=
            双向迭代器	读写操作，并能向前和向后操作	                        读写，支持++、-,
            随机访问迭代器	读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器	读写，支持++、-、[n]、-n、<、<=、>、>=
        常用的容器中迭代器种类为双向迭代器，和随机访问迭代器。
2.5容器迭代器初识
    最常见容器Vector，可以理解为数组。
    2.5.1vector存放内置数据类型
        容器：vector
        算法：for_each
        迭代器： vector<int>::iterator
    2.5.2vector存放自定义数据类型
    2.5.3vector容器嵌套容器
3.STL-常用容器
3.1string容器
    3.1.1 string基本概念
        本质:string是C++风格的字符串，而string本质上是一个类。
        string和char * 区别:	char*是一个指针，string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。
        特点:
        string类内部封装了很多成员方法，例如:查找find，拷贝copy，删除delete，替换replace，插入insert。
        string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责。
    3.1.2 string构造函数
        构造函数原型:
            string();	//创建一个空的字符串例如:string str;
            string(const char* s);	//使用字符串s初始化
            string(const string& str);	//使用一个string对象初始化另一个string对象
            string(int n, char c);	//使用n个字符c初始化
    3.1.3 string赋值操作
        功能描述:
        ·给string字符串进行赋值
        赋值的函数原型:
            string& operator=(const char* s);	    //char*类型字符串赋值给当前的字符串
            string& operator=(const string &s);	    //把字符串s赋给当前的字符串
            string& operator=(char c);	            //字符赋值给当前的字符串
            string& assign(const char *s);	        //把字符串s赋给当前的字符串
            string& assign(const char *s,int n);	//把字符串s的前n个字符赋给当前的字符串
            string& assign(const string &s);	    //把字符串s赋给当前字符串
            string& assign(int n,char c);	        //用n个字符c赋给当前字符串
    3.1.4 string字符串拼接
        功能描述:实现在字符串末尾拼接字符串
        函数原型:
            string& operator+=(const char* str);	            //重载+=操作符
            string& operator+=(const char c);	                //重载+=操作符
            string& operator+=(const string& str);	            //重载+=操作符
            string& append(const char *s);	                    //把字符串s连接到当前字符串结尾
            string& append(const char *s, int n);	            //把字符串s的前n个字符连接到当前字符串结尾
            string& append(const string &s);	                //同operator+=(const string& str)
            string& append(const string &s, int pos, int n);    //字符串s中从pos开始的n个字符连接到字符串结尾
    3.1.5 string查找和替换
    功能描述:
        查找:查找指定字符串是否存在
        替换:在指定的位置替换字符串	I
        函数原型:
            int find(const string& str, int pos =0) const;	    //查找str第一次出现位置,从pos开始查找
            int find(const char* s, int pos =0) const;	        //查找s第一次出现位置,从pos开始查找
            int find(const char* s, int pos, int n) const;	    //从pos位置查找s的前n个字符第一次位置
            int find(const char c, int pos =0) const;	        //查找字符C第一次出现位置
            int rfind(const string& str, int pos = npos) const;	//查找str最后一次位置,从pos开始查找
            int rfind(const char* s, int pos = npos) const;	    //查找s最后一次出现位置,从pos开始查找
            int rfind(const char* s, int pos, int n) const;	    //从pos查找s的前n个字符最后一次位置
            int rfind(const char c, int pos=0)const;	        //查找字符C最后一次出现位置
            string& replace(int pos, int n, const string& str);	//替换从pos开始n个字符为字符串str
            string& replace(int pos, int n,const char* s);	    //替换从pos开始的n个字符为字符串s
    3.1.6 string字符串比较
    	功能描述:
    	·字符串之间的比较
    	比较方式:
    	·字符串比较是按字符的ASCII码进行对比
    	    =返回 0
    	    >返回 1
    	    <返回-1
        函数原型:
            int compare(const string &s) const; //与字符串s比较
        	int compare(const char *s) const;	//与字符串s比较
    3.1.7 string字符串存取
        函数：
            char& operator[](int n);    //通过[]方式取字符
            char& at(int n);            //通过at()方式取字符
    3.1.8 string插入和删除
    	功能描述:
        	·对string字符串进行插入和删除字符操作
    	函数原型:
            string& insert(int pos, const char*s);	        //插入字符串
            string& insert(int pos, const string& str);	    //插入字符串
        	string& insert(int pos, int n,char c);	        //在指定位置插入n个字符C
        	string& erase(int pos, int n= npos);	        //删除从Pos开始的n个字符
    3.1.9string字串
        函数：
            string substr(int pos = 0, int n= npos) const;  //返回由pos开始的n个字符组成的字符串
3.2 vector容器
    3.2.1 vector基本概念
        功能:
        	·vector数据结构和数组非常相似，也称为单端数组
        vector与普通数组区别:
            ·不同之处在于数组是静态空间，而vector可以动态扩展
        动态扩展:
            ·并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间
    3.2.2 vector构造函数
        功能描述：
            • 创建vector容器
        函数原型：
            vector<T> v;                //采用模板实现类实现，默认构造函数
            vector(v.begin(), v.end()); //将v[begin(),end())区间中的元素拷贝给本身。
            vector(n, elem);            //构造函数将n个elem拷贝给本身。
            vector(const vector &vec);  //拷贝构造函数。
    3.2.3 vector赋值操作
        功能描述：
            •给vector容器进行赋值
        函数原型：
            vector& operator=(const vector &vec)；   //重载等号操作符
            assign(beg,end);                        //将[beg,end)区间中的数据拷贝赋值给本身。
            assign(n, elem);                        //将n个elem拷贝赋值给本身。
    3.2.4 vector容量和大小
        功能描述：
            •对vector容器的容量和大小操作
        函数原型： I
            empty();                //判断容器是否为空
            capacity();             //容器的容量
            size();                 //返回容器中元素的个数
            resize(int num);        //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。
            resize(int num,elem)；  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除
    3.2.5 vector插入和删除
        功能描述：
            •对vector容器进行插入、删除操作
        函数原型：
            push_back(ele);                                 //尾部插入元素ele
            pop_back();                                     //删除最后一个元素
            insert(const_iterator pos, ele);                //迭代器指向位置pos插入元素ele
            insert(const_iterator pos,int count,ele)；       //迭代器指向位置pos插入count个元素eleerase(const_iterator pos); //删除迭代器指向的元素
            erase(const_iterator start,const_iterator end)； //删除迭代器从start到end之间的元素clear(); //删除容器中所有元素
    3.2.6 vector数据存取
        功能描述：
            •对vector中的数据的存取操作
        函数原型：
            at(iht idx);    //返回索引idx所指的数据
            operator[];     //返回索引idx所指的数据
            front();        //返回容器中第一个数据元素
            back();         //返回容器中最后一个数据元素
    3.2.7 vector互换容器
        功能描述：
            •实现两个容器内元素进行互换
        函数原型：
            swap(vec)；      //将vec与本身的元素互换
    3.2.8 vector预留空间
        功能描述：
            ·减少vector在动态扩展容量时的扩展次数
        函数原型：
            reserve(int len)；//容器预留len个元素长度，预留位置不初始化，元素不可访问。
3.3 deque容器（daike）
    3.3.1 deque容器基本概念
        功能：
            •双端数组，可以对头端进行插入删除操作
        deque与vector区别：
            •vector对于头部的插入删除效率低，数据量越大，效率越低
            •deque相对而言，对头部的插入删除速度回比vector快
            •vector访问元素时的速度会比deque快,这和两者内部实现有关
        deque内部工作原理：
            deque内部有个中控器维护每段缓冲区中的内容，缓冲区中存放真实数据中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间。
        deque容器的迭代器也是支持随机访问的
        函数原型: .
            deque<T> deqT;              //默认构造形式
            deque(beg, nd);             //构造函数将[beg, end)区间中的元素拷贝给本身。
            deque(n, elem);             //构造函数将n个elem拷贝给本身。
            deque(const deque &deq);    //拷贝构造函数
    3.3.3deque赋值操作
        功能描述：
            •给deque容器进行赋值
        函数原型：
            deque&roperator=(const deque&deq);      //重载等号操作符
            assign(beg,end);                        //将[beg，end)区间中的数据拷贝赋值给本身。
            assign(n,elem);                         //将n个elem拷贝赋值给本身。
    3.3.4 deque大小操作
        功能描述：
            •对deque容器的大小进行操作
        函数原型：
            deque.empty();                  //判断容器是否为空
            deque.size();                   //返回容器中元素的个数
            deque.resize(num);              //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。
            //如果容器变短，则末尾超出容器长度的元素被删除。
            deque.resize(num, elem);        //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。
            //如果容器变短，则末尾超出容器长度的元素被删除。
    3.3.5deque插入和删除
        功能描述：
            •向deque容器中插入和删除数据
        函数原型：
            两端插入操作：
            push_back(elem);        //在容器尾部添加一个数据
            push_front(elem);       //在容器头部插入一个数据
            pop_back();             //删除容器最后一个数据
            pop_front();            //删除容器第一个数据
            指定位置操作：
            insert(pos,elem);       //在pos位置插入一个elem元素的拷贝，返回新数据的位置。
            insert(pos,n,elem);     //在pos位置插入n个elem数据，无返回值。
            insert(pos,beg,end)；    //在pos位置插入[beg，end)区间的数据，无返回值。
            clear();                //清空容器的所有数据erase(beg,end);//删除[beg，end)区间的数据，返回下一个数据的位置。
            erase(pos);             //删除pos位置的数据，返回下一个数据的位置。
    3.3.6deque数据存取
        功能描述：
            •对deque中的数据的存取操作
        函数原型：
            at(int idx);    //返回索引idx所指的数据
            operator[];     //返回索引idx所指的数据
            front();        //返回容器中第一个数据元素
            back();         //返回容器中最后一个数据元素
    3.3.7deque排序
        功能描述：
            •利用算法实现对deque容器进行
        排序算法：
            sort(iterator beg,iterator end)     //对beg和end区间内元素进行排序
3.4案例-评委打分
    3.4.1 案例描述
        有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。
    3.4.2 实现步骤
        1.创建五名选手，放到vector中
        2.遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中
        3.sort算法对deque容器中分数排序，去除最高和最低分
        4. deque容器遍历一遍，累加总分
        5.获取平均分
    3.5.2 stack 常用接口
        功能描述：栈容器常用的对外接口
        构造函数：
            stack<T> stk; //stack采用模板类实现，stack对象的默认构造形式
            stack(const stack &stk); //拷贝构造函数
        赋值操作：
            stack& operator=(const stack &stk); //重载等号操作符
        数据存取：
            push(elem); //向栈顶添加元素
            pop(); /1从栈顶移除第一个元素
            top(); //返回栈顶元素
        大小操作：
            empty(); //判断堆栈是否为空
            size(); //返回栈的大小
    3.6.2 queue 常用接口
        功能描述：栈容器常用的对外接口
        构造函数：
            queue<T> que; //queue采用模板类实现，queue对象的默认构造形式
            queue(const queue &que); //拷贝构造函数
        赋值操作： I
            queue& operator=(const queue &que); //重载等号操作符
        数据存取：
            push(elem); //往队尾添加元素
            pop()； /1从队头移除第一个元素
            back(); //返回最后一个元素
            front(); //返回第一个元素
        大小操作：
            empty(); //判断堆栈是否为空
            size(); //返回栈的大小
3.7list容器
    3.7.1list基本概念
        功能：将数据进行链式存储
            链表(list)：是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接来实现的。
            链表的组成：链表由一系列结点组成。
            结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。
            SLT中的链表是一个双向循环链表。
            由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器。
        list的优点:
            采用动态存储分配，不会造成内存浪费和溢出
            链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素
        list的缺点:
            链表灵活，但是空间(指针域)和时间(遍历)额外耗费较大。
            list有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。
        总结：
            STL中List和vector是两个最常用的容器，各有优缺点。
    3.7.2list构造函数
        功能描述：
            创建list容器
        函数原型：
            list<T> lst; //list采用采用模板类实现,对象的默认构造形式：
            list(beg,end); //构造函数将[beg，end)区间中的元素拷贝给本身。//构造函数将n个elem拷贝给本身。
            list(n,elem);
            list(const list &lst); //拷贝构造函数。
        总结：
            list构造方式同其他几个STL常用容器，熟练掌握即可。
    3.7.2list赋值和交换
        功能描述：
            给list容器进行赋值，以及交换list容器。
        函数原型：
            assign(beg, end); //将[beg，end)区间中的数据拷贝赋值给本身。
            assign(n, elem); //将n个elem拷贝赋值给本身。
            list& operator=(const list &lst); //重载等号操作符
            swap(lst); //将lst与本身的元素互换。
        总结：
            list赋值和交换能够灵活运用即可。
    3.7.3list大小操作
        功能描述：
            对list容器的大小进行操作。
        函数原型：
            size(); //返回容器中元素的个数
            empty(); //判断容器是否为空
            resize(num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。//如果容器变短，则末尾超出容器长度的元素被删除。
            resize(num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。//如果容器变短，则末尾超出容器长度的元素被删除。
        总结:
            判断是否为空——empty
            返回元素个数——size
            重新指定个数——resize
    3.7.4list插入和删除
        功能描述：
            对list容器进行数据的插入和删除
        函数原型：
            push_back(elem)；//在容器尾部加入一个元素
            pop_back();//删除容器中最后一个元素
            push_front(elem);//在容器开头插入一个元素
            pop_front();//从容器开头移除第一个元素
            insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。
            insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。
            insert(pos,beg,end);//在pos位置插入[beg，end)区间的数据，无返回值。
            clear();//移除容器的所有数据
            erase(beg,end);//删除[beg，end)区间的数据，返回下一个数据的位置。
            erase(pos);//删除pos位置的数据，返回下一个数据的位置。
            remove(elem);//删除容器中所有与elem值匹配的元素。
        总结：
            尾插——push_back
            尾删——pop_back
            头插——push_front
            头删——pop_front
            插入——insert
            删除——erase
            移除——remove
            清空——clear
    3.7.5list数据存取
        功能描述：
            对list容器中数据进行存储。
        函数原型：
            front(); /返回第一个元素。
            back(); //返回最后一个元素。
        总结：
            list容器中不可以通过[]或者at方式访问数据
            返回第一个元素——front
            返回最后一个元素——back
    3.7.6list反转和排序
        功能描述：
            将容器中的元素反转，以及将容器中的数据进行排序。
        函数原型：
            reverse();//反转链表
            sort(); //链表排序
        总结：
            反转——reverse
            排序——sort(成员函数)
3.8set/multiset容器
    3.8.1set基本概念
        简介：
            所有元素都会在插入时被自动排序。
        本质：
            set/multiset属于关联式容器，底层结构是用二叉树实现。
        set和multiset区别：
            set不允许容器中有重复的元素。
            multiset允许容器中有重复的元素
    3.8.2set构建和赋值
        功能描述：
            创建set容器以及赋值。
        构造：
            set<T> st; //默认构造函数：
            set(const set &st); //拷贝构造函数
        赋值：
            set& operator=(const set &st); //重载等号操作符
        总结：
            set容器插入数据时用insert
            set容器插入的数据会自动排序
    3.8.3set大小和交换
        功能描述：
            统计set容器大小以及交换set容器。
        函数原型：
            sized； //返回容器中元素的数目
            empty(); //判断容器是否为空
            swap(st); //交换两个集合容器
        总结：
            统计大小——size
            判断是否为空——empty
            交换容器——swap
    3.8.4set插入和删除
        功能描述：
        set容器进行插入数据和删除数据
        函数原型：
            insert(elem); //在容器中插入元素。
            clear(); //清除所有元素
            erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。erase(beg, end); //删除区间[beg，end)的所有元素，返回下一个元素的迭代器。erase(elem); //删除容器中值为elem的元素。
        总结：
            插入——insert
            删除——erase
            清空——clear
    3.8.5set查找和统计
        功能描述：
            对set容器进行查找数据以及统计数据
        函数原型：
            find(key); //查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回set.end(;
            count(key); 11统计key的元素个数
        总结：
            查找——find(返回的是迭代器)
            统计——count(对于set,结果为0或者1)
    3.8.6set和multiset区别
        学习目标：
        掌握set和multiset的区别
        区别：
            set不可以插入重复数据，而multiset可以
            set插入数据的同时会返回插入结果，表示插入是否成功
            multiset不会检测数据，因此可以插入重复数据
        总结：
            如果不允许插入重复数据可以利用set
            如果需要插入重复数据利用multiset
    3.8.7pair对组创建
        功能描述：
            成对出现的数据，利用对组可以返回两个数据。
        两种创建方式：
            pair<type, type> p (value1, value2);
            pair<type, type> p= make_pair( value1, value2);
        总结：
            利用仿函数可以指定set容器的排序规则。
            对于自定义数据类型，set必须指定排序规则才可以插入数据。
3.9map/multimap容器
    3.9.1map基本概念
        简介：
            map中所有元素都是pair
            pair中第一个元素为key(键值)，起到索引作用，第二个元素为value(实值)
            所有元素都会根据元素的键值自动排序
        本质：
            map/multimap属于关联式容器，底层结构是用二叉树实现。
        优点：
            可以根据key值快速找到value值
        区别：
            map和multimap区别
            map不允许容器中有重复key值元素
            multimap允许容器中有重复key值元素
    3.9.2map构造和赋值
        功能描述：
            对map容器进行构造和赋值操作。
        函数原型：
        构造：
            map<T1,T2> mp; //map默认构造函数：
            map(const map &mp); //拷贝构造函数
        赋值：
            map&operator=(const map &mp); //重载等号操作符
        总结：
            map中所有元素都是成对出现，插入数据时要使用对组。
    3.9.3map大小和交换
        功能描述：
            统计map容器大小以及交换map容器
        函数原型：
            size(); //返回容器中元素的数目
            empty(); //判断容器是否为空
            swap(st); //交换两个集合容器
        总结：
            统计大小——size
            判断是否为空——empty
            交换容器——swap
    3.9.4map插入和删除
        功能描述:
            map容器进行插入数据和删除数据
        函数原型：
            insert(elem); //在容器中插入元素。
            clear(); //清除所有元素
            erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。
            erase(beg, end); //删除区间[beg，end)的所有元素，返回下一个元素的迭代器。
            erase(key); //删除容器中值为key的元素。
        总结：
            map插入方式很多，记住其一即可
            插入——insert
            删除——erase
            清空——clear
    3.9.5map查找和统计
        功能描述：
            对map容器进行查找和数据以及统计数据
        函数原型：
            find(key); //查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回set.end(;
            count(key); //统计key的元素个数
        总结：
            查找——find(返回的是迭代器)
            统计——cout(对于map,结果为0或1)
    3.9.6map容器排序
        学习目标：
            map容器默认排序规则为按照key值进行从小到大排序，掌握如何改变排序规则。
        主要技术点：
            利用仿函数，可以改变排序规则。
        总结：
            利用仿函数可以指定map容器的排序规则
            对于自定义数据类型，map必须要指定排序规则，同set容器
3.10案例——员工分组
    案例描述
        公司今天招聘了10个员工(ABCDEFGHIJ)，10名员工进入公司之后，需要指派员工在哪个部门工作。
        员工信息有：姓名、工资组成、部门分为：策划、美术、研发
        通过multimap进行信息的插入 key(部门编号)value(员工)
        分部门显示员工信息
    实现步骤
        创建10名员工，放到vector中
        遍历vector容器，取出每个员工，进行随机分组
        分组后，将员工部门编号作为key,具体员工作为value,放入到multimap容器中
        分部门显示员工信息
4STL函数对象（也叫仿函数）
4.1函数对象
    4.1.1函数对象概念
        概念：
            重载函数调用操作符的类，其对象也称为函数对象
            函数对象使用重载()时，行为类似函数调用，也叫仿函数
        本质：
        函数对象(仿函数)是一个类，不是一个函数。
        函数对象使用
        特点：
            函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值
            函数对象超出普通函数的概念，函数对象可以有自己的状态
            函数对象可以作为参数传递
        总结:
            仿函数写法非常灵活，可以作为参数进行传递。
4.2谓词
    4.2.1谓词概念
        概念:
            返回bool类型的仿函数称为谓词
            如果operator()接受一个参数，那么叫做一元谓词
            如果operator()接收两个参数，那么叫做二元谓词
    4.2.2一元谓词
        总结：
            参数中只有一个的谓词，叫做一元谓词
    4.2.3二元谓词
        总结：
            参数只有两个的谓词，称为二元谓词。
4.3内建函数对象
    4.3.1内建函数对象意义
        概念：
            STL内建了一些函数对象
        分类：
            算数仿函数
            关系仿函数
            逻辑仿函数
        用法：
            这些仿函数所产生的对象，用法和一般函数完全相同
            使用内建函数对象，需要引入头文件#include< functional>
    4.3.2算数仿函数
        功能描述：
            实现四则运算
            其中negate是一元运算，其它都是二元运算
        仿函数原型：

        总结：
        使用内建函数对象时，需要引入头文件#include< functional>
    4.3.3关系仿函数
        功能描述：
            实现关系对比
        仿函数原型：

        总结：
        关系仿函数最常用的就是greater<>大于
    4.3.1逻辑仿函数
        功能描述：
            实现逻辑运算
        函数原型:

        总结：
            逻辑仿函数实际应用较少，了解即可。
5STL常用算法
    概述:
        算法主要是由头文件< algorithm >< functional > < numeric >组成
        <algorithm>是所有STL头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改等等。
        <functional>定义了一些模板类，用以声明函数对象
        <numeric>体积很小，只包括几个在序列上面进行简单数据运算的模板函数
